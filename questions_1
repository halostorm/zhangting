# 1、父类：
class User():
    """Represent a simple user profile."""

    def __init__(self, first_name, last_name, username, email, location):
        """Initialize the user."""
        self.first_name = first_name.title()
        self.last_name = last_name.title()
        self.username = username
        self.email = email
        self.location = location.title()
        self.login_attempts = 0              

    def describe_user(self):
        """Display a summary of the user's information."""
        print("\n" + self.first_name + " " + self.last_name)
        print("  Username: " + self.username)
        print("  Email: " + self.email)
        print("  Location: " + self.location)

    def greet_user(self):
        """Display a personalized greeting to the user."""
        print("\nWelcome back, " + self.username + "!")

    def increment_login_attempts(self):
        """Increment the value of login_attempts."""
        self.login_attempts += 1

    def reset_login_attempts(self):
        """Reset login_attempts to 0."""
        self.login_attempts = 0

# 2、子类：
class Admin(User):
    """A user with administrative privileges."""

    def __init__(self, first_name, last_name, username, email, location):
        """Initialize the admin."""
        super().__init__(first_name, last_name, username, email, location)          #初始化父类属性

        # Initialize an empty set of privileges.
        self.privileges = Privileges()            #再初始化子类特有属性（初始化一个privileges空集合）， #子类继承父类的时候，Privileges()是干什么的，怎么又多出来一个Privileges类

# 3、新类：   
（这个新类是从大型类拆分出来多个协同工作的小类之一，它没有任何继承类，子类中的self.privileges = Privileges()即为运行代码让python创建一个新的Privileges实例，并将该实例存储在
属性self.privileges中，每当方法__init__()被调用时，都将执行该操作，因此每个Admin实例都包含一个自动创建的Privileges实例）
class Privileges():
    """A class to store an admin's privileges."""

    def __init__(self, privileges=[]):
        self.privileges = privileges

    def show_privileges(self):
        print("\nPrivileges:")
        if self.privileges:
            for privilege in self.privileges:
                print("- " + privilege)
        else:
            print("- This user has no privileges.")


eric = Admin('eric', 'matthes', 'e_matthes', 'e_matthes@example.com', 'alaska')
eric.describe_user()

eric.privileges.show_privileges()        

print("\nAdding privileges...")
eric_privileges = [
    'can reset passwords',
    'can moderate discussions',
    'can suspend accounts',
    ]
eric.privileges.privileges = eric_privileges            
eric.privileges.show_privileges()        #这行代码让python在实例eric中查找属性privileges，并对存储在该属性中的Privileges() 实例调用方法show_privileges().
