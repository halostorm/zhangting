python 学习路径
一、预备
python安装
集成开发环境

二、基本数据类型
数和四则运算
除法
常用数学函数和运算优先级
字符串
列表
元组
字典
集合

三、语句和文件

1、顺序结构：很好理解

bool()很重要，所有的均要以此来判断

2、选择结构:
     单分支结构：
         if  条件表达式：
             条件执行语句1
          
     双分支结构：非a即b二选一
         if  条件表达式：
             条件执行语句1
         else：
             条件执行语句2
 
     多分支结构：多分段区间
         if  条件表达式：
             条件执行语句1
         elif：
             条件执行语句2
         elif：
             条件执行语句N
         else：
             条件执行语句N+1

     嵌套if：
         if  条件表达式1：
               if  内层条件表达式：
                   内层条件执行体1
               else：
                   内层条件执行体2
         else:
             条件执行体
        

简写：
x  if  条件判断  y
例如：print((a,'大于等于',b) if a>=b else (a,'小于',b))
条件判断布尔值是true  条件表达式返回值为x
条件判断布尔值是false 条件表达式返回值为y


pass语句：只是占位符，暂不执行


 3、循环结构:
（1）range()函数    用print(list(range()))查看
    range(5)        [0,1,2,3,4]
    range(1,5)     [1,2,3,4]
    range(1,6,2)  [1,3,5]
    

（2）while循环
    
   while  条件表达式：
            条件执行体（循环体）

while四步循环法：初始化变量、条件判断、条件执行体（循环体）、改变变量
                             初始化变量=条件判断变量=改变变量（均是同一个）

选择结构的if与循环结构的while区别：
    if是判断一次，条件为True执行一行；
    while是判断N+1次，条件为True执行N次。

例子：
#计算1到100之间的偶数之和
sum = 0
a = 1
while a <= 100:
    if not bool(a%2):    #或者直接if a%2==0:
        sum+=a
    a += 1
print(sum)

（3）for-in循环

for 自定义变量 in 可迭代对象：
     循环体


in表达从（字符串、序列等）中依次取值，又称为遍历
for-in遍历的对象必须是可迭代对象
循环体内不需要访问自定义变量，可以将自定义变量代为下划线

例子：
水仙花数
for a in range(100,1000):
    x = a%10           #取余靠右
    y = a//10%10    #取商靠左
    z = a//100
    if a==x**3 + y**3 + z**3:
        print(z,y,x,"是水仙花数",a)

（4）break、continue与else语句
break：用于结束循环结构，达到想要目的，跳出整个循环，否则继续循环。
continue：用于结束当前循环，进行下一次循环，通常与分支结构的if一起使用。
例子：
for a in range(1,51):
    if a%5!=0:
        continue
    print(a)

else：
例子，主要是搭配未碰到break时的情况：
for a in range(3):
    pwd=input("请输入密码：")
    if pwd=='8888':
        print("密码正确")
        break
    else:
        print("密码错误")
else:
    print("对不起，三次密码错误")

或者：
a=0
while a<3:
    pwd=input("请输入密码：")
    if pwd=='8888':
        print("密码正确")
        break
    else:
        print("密码不正确")
    a+=1
else:
    print("三次密码错误")

（5）嵌套循环
for i in range(1,10):
    for j in range(1,i+1):
        print(i,'*',j,'=',i*j,end='\t')
    print()


二重循环中的break和continue只用于控制本层循环

for i in range(5):
    for j in range(1,10):
        if j%2==0:
            break
        print(j)


for i in range(5):
    for j in range(1,10):
        if j%2==0:
            continue
        print(j,end='\t')
    print()


四、函数

五、类
模板如下：
class Student:
    native_place = '吉林'  #类属性

    def __init__(self,name,age):
        self.name = name   # 实例属性
        self.age = age

    def eat(self):         #实例方法
        print("{0}岁大的{1}在吃饭饭".format(self.age,self.name))

    @staticmethod          #静态方法
    def sm():
        print("你吃饭了吗")

    @classmethod           #类方法
    def cm(cls):
        print("我吃饭了呀")

stu1 = Student('张婷',28)
stu2 = Student('杜文',26)
stu1.gender = '女'   #动态绑定属性
print(stu1.name,stu1.age,stu1.gender)
print(stu2.name,stu2.age)

print(stu1.eat())
print(stu2.eat())
#实例方法


print(Student.native_place)
print(stu1.native_place)
print(stu2.native_place)

Student.native_place = '河南'
print(stu1.native_place)
print(stu2.native_place)
#访问类属性


Student.method()
#静态方法使用方式，无参数，使用类名直接访问

Student.cm()
#类方法使用方式，参数是class，使用类名直接访问

def show():
    print("定义在类之外，称为函数")

stu1.show = show   #动态绑定方法
stu1.show()

# stu2.show()  会报错，stu2并未绑定show方法，函数在绑定到对象之后就称为方法

"""
总结：
1、面向过程、面向对象
2、类对象class：
   类属性(Student.native_place() 调用)
   类方法(Student.cm() 调用)
   实例方法(stu = Student(),    stu.eat() = Student.eat(stu) 调用)
   静态方法(Student.method() 调用)
3、实例对象
   类名()
   动态绑定属性
   动态绑定方法
   """

封装：
  self.__age()  外部不让访问
  print(dir(stu))   查询
  print(stu._Student__age)  可强制访问
  
继承与重写：
class Person(object):
    def __init__(self,name,age):
        self.name = name
        self.age = age
    def info(self):
        print("the name is:",self.name,"the age is:",self.age)

class Student(Person):
    def __init__(self,name,age,id):
        super().__init__(name,age)   #调用父类
        self.id = id
    def info(self):        #重写
        super().info()     #父类有的
        print(self.id)     #重写添加的

class Teacher(Person):
    def __init__(self,name,age,year):
        super().__init__(name,age)    #注意__init__()为双下划线
        self.year = year
    def info(self):
        super().info()
        print(self.year)

stu = Student('张婷',28,10)
stu.info()

tea = Teacher('杜文',26,12)
tea.info()


多态：



六、错误和异常
七、模块
模块与包：
  模块：
     ~避免函数名/变量名重名
     ~自定义模块：一个.py文件成为一个模块
     ~第三方模块：
         安装：pip install 模块名
         使用：from...import 模块名
   包：
     ~避免模块名重名
     ~包含__init__.py文件

以主程序运行：if __name__ = '__ main__':    #只有在主程序中才会执行，调用不执行

八、保存数据


九、一个录入数据系统的实战
filename = 'student.txt'

def main():
    while True:
        menu()
        choice = int(input('请选择：'))
        if choice in [0,1,2,3,4,5,6,7]:
            if choice == 0:
                answer = input('您确定要退出系统吗？y/n')
                if answer == 'y' or answer == 'Y':
                    print("谢谢您的使用！！！")
                    break   #退出系统
                else:
                    continue
            elif choice == 1:
                insert()  #录入
            elif choice == 2:
                search()  #查找
            elif choice == 3:
                delete()  #删除
            elif choice == 4:
                modify()  #修改
            elif choice == 5:
                sort()    #排序
            elif choice == 6:
                total()   #统计
            elif choice == 7:
                show()    #显示

def menu():
    print("==========================学生信息管理系统=============================")
    print("|---------------------------->功能菜单<-------------------------------|")
    print("|                           1.录入学生信息                            |")
    print("|                           2.查找学生信息                            |")
    print("|                           3.删除学生信息                            |")
    print("|                           4.修改学生信息                            |")
    print("|                           5.学生信息排序                            |")
    print("|                           6.统计学生总数                            |")
    print("|                           7.显示所有信息                            |")
    print("|                           0.退出信息系统                            |")
    print("|--------------------------------------------------------------------|")

def insert():
    student_lst = []
    while True:
        id = input('请输入ID(如1009):')
        if not id:
            break
        name = input('请输入姓名(如张三):')
        if not name:
            break

        try:
            englist = int(input('请输入英语成绩:'))
            python = int(input('请输入python成绩:'))
            java = int(input('请输入java成绩:'))
        except:
            print("输入无效，不是整数类型，请重新输入:")
            continue
        # 将录入的学生信息保存到字典当中
        student = {'id':id,'name':name,'english':englist,'python':python,'java':java}
        # 将录入的学生信息添加到列表中
        student_lst.append(student)
        answer = input('你是否继续添加？y/n\n')
        if answer=='y':
            continue
        else:
            break

    #调用save()函数
    save(student_lst)
    print("学生信息录入完毕！")

def save(lst):
    try:
        stu_txt = open(filename,'a',encoding='utf-8')    #a为追加模式
    except:
        stu_txt = open(filename,'w',encoding='utf-8')
    for item in lst:
        stu_txt.write(str(item)+'\n')
        stu_txt.close()


def search():
    pass
def delete():
    pass
def modify():
    pass
def sort():
    pass
def total():
    pass
def show():
    pass

if __name__ == '__main__':
    main()
----------------------------------------------------------------------------------------------------------------------
各个章节实战训练题目：
# coding: UTF-8
# 开发人员: 张婷童鞋
# 开发时间: 2020-11-05
1、
print('Albert Einstein once said, "A person who never made a mistake')
print('never tried anything new."')    #单引号双引号

2、
name = "\tEric Matthes\n"    # \t空格，\n换行
print("Unmodified:")
print(name)
print("\nUsing lstrip():")
print(name.lstrip())
print("\nUsing rstrip():")
print(name.rstrip())
print("\nUsing strip():")
print(name.strip())
lstrip()：用于截掉字符串左边的空格或指定字符
rstrip()：删除 string 字符串末尾的指定字符（默认为空格）
strip()：用于移除字符串头尾指定的字符（默认为空格或换行符）或字符序列。

3、
names = ['ron', 'tyler', 'dani']
msg = "Hello, " + names[0].title() + "!"
print(msg)

4、
Invite some people to dinner.
guests = ['a', 'b', 'c']

name = guests[1].title()
print(name)

del guests[1]         #等同于del (guest[1])
guests.insert(1, 'd')

name = guests[1].title()
guests.append('e')
print(guests)
name = guests.pop(1)
print(guests)
print(name)
主要了解这个 del()函数、insert()函数、append()函数、pop()函数
insert() 函数用于将指定对象插入列表的指定位置
list.insert(index, obj), index:对象obj需要插入的索引位置。obj:要插入列表中的对象。
pop() 函数：
list 中pop()用于移除列表中的一个元素（默认最后一个元素），并且返回该元素的值。
       pop()方法语法：list.pop([index=-1]),如gusets.pop(1)
dict 中pop()方法删除字典给定键 key 及对应的值，返回值为被删除的值。key 值必须给出，否则，返回default值。
       pop()方法语法：pop(key[,default]) key: 要删除的键值，default: 如果没有 key，返回 default值，例如：
       site= {'name': '菜鸟教程', 'alexa': 10000, 'url': 'www.runoob.com'}
       pop_obj=site.pop('name')
       print(site)        #{'alexa': 10000, 'url': 'www.runoob.com'}
       print(pop_obj)    #菜鸟教程


5、
locations = ['himalaya', 'andes', 'tierra del fuego', 'labrador', 'guam']

print(sorted(locations))   #按字母a-z顺序排序
print(sorted(locations, reverse=True))  #按字母z-a顺序排序
locations.reverse()
print(locations)       #倒序排序

locations.sort()          #等同于sorted(locations),表达方式不同但意思作用相同，按字母a-z
print(locations)

locations.sort(reverse=True) #等同于sorted(locations,revverse=True)，表达方式不同但意思作用相同，按字母z-a
print(locations)

6、
a=[]
[a.append(b) for b in range(1,10)]   #列表解析
for b in a:
    if b == 1:
        print("1st")
    elif b == 2:
        print("2nd")
    elif b == 3:
        print("3rd")
    else:
        print(str(b) + "th")

7、
glossary = {
    'string': 'A series of characters.',
    'comment': 'A note in a program that the Python interpreter ignores.',
    'list': 'A collection of items in a particular order.',
    }

a = ['string','comment']
 for word,definition in glossary.items():
     print(word.title() + ": " + definition)

for word in glossary.keys():
    print(word.title())
    if word in a:
        print(word.title(),':',glossary[word].title())   #for 循环的遍历步骤，if为true只执行一次即返回至for重新遍历

8、
rivers = {
    'nile': 'egypt',
    'mississippi': 'united states',
    'fraser': 'canada',
    'kuskokwim': 'alaska',
    'yangtze': 'china',
    }

for river, country in rivers.items():
    print("The " + river.title() + " flows through " + country.title() + ".")

print("\nThe following rivers are included in this data set:")
for river in rivers.keys():
    print("- " + river.title())

print("\nThe following countries are included in this data set:")
for country in rivers.values():
    print("- " + country.title())

9、
# Make an empty list to store people in.
people = []

# Define some people, and add them to the list.
person = {
    'first_name': 'eric',
    'last_name': 'matthes',
    'age': 43,
    'city': 'sitka',
}
people.append(person)

person = {
    'first_name': 'ever',
    'last_name': 'matthes',
    'age': 5,
    'city': 'sitka',
}
people.append(person)

person = {
    'first_name': 'willie',
    'last_name': 'matthes',
    'age': 8,
    'city': 'sitka',
}
people.append(person)

# Display all of the information in the dictionary.
for person in people:
    name = person['first_name'].title() + " " + person['last_name'].title()
    age = str(person['age'])
    city = person['city'].title()

    print(name + ", of " + city + ", is " + age + " years old.")

10、
Make an empty list to store the pets in.
pets = []

Make individual pets, and store each one in the list.
pet = {
    'animal type': 'python',
    'name': 'john',
    'owner': 'guido',
    'weight': 43,
    'eats': 'bugs',
}
pets.append(pet)

pet = {
    'animal type': 'chicken',
    'name': 'clarence',
    'owner': 'tiffany',
    'weight': 2,
    'eats': 'seeds',
}
pets.append(pet)

pet = {
    'animal type': 'dog',
    'name': 'peso',
    'owner': 'eric',
    'weight': 37,
    'eats': 'shoes',
}
pets.append(pet)

# Display information about each pet.
for pet in pets:
    print("\nHere's what I know about " + pet['name'].title() + ":")
    for key, value in pet.items():
        print("\t" + key + ": " + str(value))

11、
favorite_places = {
    'eric': ['bear mountain', 'death valley', 'tierra del fuego'],
    'erin': ['hawaii', 'iceland'],
    'ever': ['mt. verstovia', 'the playground', 'south carolina']
    }
for name,places in favorite_places.items():
    print(name.title()+"'s favorite places are:")
    for place in places:
        print("- ",place)               #items()函数默认返回name（单个key）,places（单个places的列表）的列表形式

12、
cities = {
    'santiago': {
        'country': 'chile',
        'population': 6158080,
        'nearby mountains': 'andes',
        },
    'talkeetna': {
        'country': 'alaska',
        'population': 876,
        'nearby mountains': 'alaska range',
        },
    'kathmandu': {
        'country': 'nepal',
        'population': 1003285,
        'nearby mountains': 'himilaya',
        }
    }

for city, city_info in cities.items():
    country = city_info['country'].title()
    population = city_info['population']
    mountains = city_info['nearby mountains'].title()

    print("\n" + city.title() + " is in " + country + ".")
    print("  It has a population of about " + str(population) + ".")
    print("  The " + mountains + " mountains are nearby.")   #字典中套字典,不可单纯像列表一样遍历,因为其有键值对,非单个元素

13、
cities = {
    'a':{'x':'1','y':2,'z':'3',},
    'b':{'x':'4','y':5,'z':'6',},
    'c':{'x':'7','y':8,'z':'9'}
          }
for name,infos in cities.items():
    print(name.title())
    x=infos['x']
    y=infos['y']
    z=infos['z']
    print(name.title()+"'s information is"+x+str(y)+z)

14、
prompt = "\nWhat topping would you like on your pizza?"
prompt += "\nEnter 'quit' when you are finished: "

while True:
    topping = input(prompt)
    if topping != 'quit':
        print("  I'll add " + topping + " to your pizza.")
    else:
        break                 #while True 会不断循环执行,故要有跳出机制,如break

15
sandwich_orders = ['veggie', 'grilled cheese', 'turkey', 'roast beef']
finished_sandwiches = []

while sandwich_orders:
    current_sandwich = sandwich_orders.pop()
    print("I'm working on your " + current_sandwich + " sandwich.")
    finished_sandwiches.append(current_sandwich)

print("\n")
for sandwich in finished_sandwiches:
    print("I made a " + sandwich + " sandwich.")

16
sandwich_orders = [
    'pastrami', 'veggie', 'grilled cheese', 'pastrami',
    'turkey', 'roast beef', 'pastrami']
finished_sandwiches = []

print("I'm sorry, we're all out of pastrami today.")
while 'pastrami' in sandwich_orders:
    sandwich_orders.remove('pastrami')

print("\n")
while sandwich_orders:
    current_sandwich = sandwich_orders.pop()
    print("I'm working on your " + current_sandwich + " sandwich.")
    finished_sandwiches.append(current_sandwich)

print("\n")
for sandwich in finished_sandwiches:
    print("I made a " + sandwich + " sandwich.")

17
name_prompt = "\nname? "
place_prompt = "place? "
continue_prompt = "\n (yes/no) "
responses = {}

while True:
    name = input(name_prompt)
    place = input(place_prompt)
    responses[name] = place

    repeat = input(continue_prompt)
    if repeat != 'yes':
        break

print("\n--- Results ---")
for name, place in responses.items():
    print(name.title() + " would like to visit " + place.title() + ".")

18、
class Restaurant:
    def __init__(self,restaurant_name,cuisine_type):
        self.restaurant_name=restaurant_name.title()
        self.cuisine_type=cuisine_type
        self.number_served=100

    def increment_number_served(self,number):
        self.number_served += number
        return self.number_served

    def describe_restaurant(self):
        print(self.restaurant_name,self.cuisine_type)

    def open_restaurant(self):
        print("the",self.restaurant_name,"is opening" )

restaurant=Restaurant('haha','hot')
print("there are",str(restaurant.increment_number_served(239)),"people have been eat in",restaurant.restaurant_name)
print(restaurant.cuisine_type)

restaurant.describe_restaurant()
restaurant.open_restaurant()

19、
class User:
    def __init__(self,first_name,last_name,movie):
        self.first_name=first_name
        self.last_name=last_name
        self.movie=movie
        self.login_attempts=0

    def describe_user(self):
        print("the name is:"+' '+self.first_name+' '+self.last_name+'. '+"favorite movie is"+' '+self.movie)

    def greet_user(self):
        print("hi"+' '+self.first_name+''+self.last_name+', '+"nice to meet you!")

    def increment_login_attempts(self):
        self.login_attempts += 1
        return self.login_attempts
        #若是有return返回值，如上，则打印的时候只需直接打印执行的user2.increment_login_attempts()即可输出，注意字符串
        #若是没有返回值，则需先执行user2.increment_login_attempts()，再进行打印user.login_attempts即可。
    def reset_login_attempts(self):
        self.login_attempts = 0
        return self.login_attempts


user1 = User('zhang','ting','haha')
user1.describe_user()
user1.greet_user()

user2=User('zhang','ting','haha')
print(user2.increment_login_attempts())
print(user2.increment_login_attempts())
print(user2.increment_login_attempts())

print(user2.reset_login_attempts())

20、继承
class Restaurant():
    """A class representing a restaurant."""

    def __init__(self, name, cuisine_type):
        """Initialize the restaurant."""
        self.name = name.title()
        self.cuisine_type = cuisine_type
        self.number_served = 0

    def describe_restaurant(self):
        """Display a summary of the restaurant."""
        msg = self.name + " serves wonderful " + self.cuisine_type + "."
        print("\n" + msg)

    def open_restaurant(self):
        """Display a message that the restaurant is open."""
        msg = self.name + " is open. Come on in!"
        print("\n" + msg)

    def set_number_served(self, number_served):
        """Allow user to set the number of customers that have been served."""
        self.number_served = number_served

    def increment_number_served(self, additional_served):
        """Allow user to increment the number of customers served."""
        self.number_served += additional_served


class IceCreamStand(Restaurant):
    """Represent an ice cream stand."""

    def __init__(self, name, cuisine_type='ice_cream'):
        """Initialize an ice cream stand."""
        super().__init__(name, cuisine_type)
        self.flavors = []

    def show_flavors(self):
        """Display the flavors available."""
        print("\nWe have the following flavors available:")
        for flavor in self.flavors:
            print("- " + flavor.title())


big_one = IceCreamStand('The Big One')
big_one.flavors = ['vanilla', 'chocolate', 'black cherry']

big_one.describe_restaurant()
big_one.show_flavors()

21、
class Person(object):

    def __init__(self, name, age):
        self.name = name
        self.age = age
        self.weight = 'weight'

    def talk(self):
        print("person is talking....")


class Chinese(Person):

    def __init__(self, name, age, language):
        Person.__init__(self, name, age)
        self.language = language
        print(self.name, self.age, self.weight, self.language)

    def talk(self):  # 子类 重构方法
        print('%s is speaking chinese' % self.name)

    def walk(self):
        print('is walking...')


c = Chinese('bigberg', 22, 'Chinese')
c.talk()



class User():
    """Represent a simple user profile."""

    def __init__(self, first_name, last_name, username, email, location):
        """Initialize the user."""
        self.first_name = first_name.title()
        self.last_name = last_name.title()
        self.username = username
        self.email = email
        self.location = location.title()
        self.login_attempts = 0

    def describe_user(self):
        """Display a summary of the user's information."""
        print("\n" + self.first_name + " " + self.last_name)
        print("  Username: " + self.username)
        print("  Email: " + self.email)
        print("  Location: " + self.location)

    def greet_user(self):
        """Display a personalized greeting to the user."""
        print("\nWelcome back, " + self.username + "!")

    def increment_login_attempts(self):
        """Increment the value of login_attempts."""
        self.login_attempts += 1

    def reset_login_attempts(self):
        """Reset login_attempts to 0."""
        self.login_attempts = 0


class Admin(User):
    """A user with administrative privileges."""

    def __init__(self, first_name, last_name, username, email, location):
        """Initialize the admin."""
        super().__init__(first_name, last_name, username, email, location)

        # Initialize an empty set of privileges.
        self.privileges = Privileges()

class Privileges():
    """A class to store an admin's privileges."""

    def __init__(self, privileges=[]):
        self.privileges = privileges

    def show_privileges(self):
        print("\nPrivileges:")
        if self.privileges:
            for privilege in self.privileges:
                print("- " + privilege)
        else:
            print("- This user has no privileges.")


eric = Admin('eric', 'matthes', 'e_matthes', 'e_matthes@example.com', 'alaska')
eric.describe_user()


eric.privileges.show_privileges()


print("\nAdding privileges...")
eric_privileges = [
    'can reset passwords',
    'can moderate discussions',
    'can suspend accounts',
    ]
eric.privileges.privileges = eric_privileges
eric.privileges.show_privileges()


-------
22、
filename = '1\copy_python.txt'    #相对路径

print("--- Reading in the entire file:")
with open(filename) as f:
    contents = f.read()
print(contents)

print("\n--- Looping over the lines:")
with open(filename) as f:
    for line in f:
        print(line.rstrip())

print("\n--- Storing the lines in a list:")
with open(filename) as f:
    lines = f.readlines()
print(lines)
for line in lines:
    print(line.rstrip())

或者
filename=(r'D:\python\python crash course\venv\2.txt')
print(filename)         #假如文件里有中文，需要在filename后面添加encoding='UTF-8'
with open(filename) as f:
    contents = f.read()
print(contents)

with open(r'D:\python\python crash course\venv\2.txt','w',encoding='UTF-8') as f:
    contents = f.write('hahahahahah')
print(contents)

23、
filename = 'learing_python.txt'

print("\n--- Looping over the lines:")
with open(filename) as f:
    for line in f:
        line=line.rstrip()
        print(line.replace('Python','C'))

24、
filename=('1/pi.txt')
with open(filename) as f:
    lines=f.readlines()    #输出为列表形式,txt文件内容单行读取,分别作为元素存储在lines中
print(lines)               #打印出的lines可以看到是'单行\n'形式

pa_string=''
for line in lines:
    pa_string+=line.strip()   #移除字符串前后的字符或字符序列
print(pa_string)

pr_string=''
for line in lines:
    pr_string+=line.rstrip()  #删除字符串末尾的指定字符(默认为空格,\n即占一个空格)
print(pr_string)

pl_string=''
for line in lines:
    pl_string+=line.lstrip()     #删除字符串左边的空格或指定字符
print(pl_string)

25、
filename=('1/pi.txt')
with open(filename,'w') as f:
    f.write('hahahahhahha.\n')
    f.write('hihihihihihi.\n')   #写入，后面若print打印的话只能打印写入字符是几个，若为r模式，则print可读取内容

with open(filename,'a') as f:
    f.write('9999999.\n')
    f.write('10000000.\n')         #追加

26、
filename = 'guest_book.txt'

print("Enter 'quit' when you are finished.")
while True:
    name = input("\nWhat's your name? ")
    if name == 'quit':
        break
    else:
        with open(filename, 'a') as f:
            f.write(name + "\n")
        print("Hi " + name + ", you've been added to the guest book.")

27、
filename = 'programming_poll.txt'

responses = []
while True:
    response = input("\nWhy do you like programming? ")
    responses.append(response)

    continue_poll = input("Would you like to let someone else respond? (y/n) ")
    if continue_poll != 'y':
        break

with open(filename, 'a') as f:
    for response in responses:
        f.write(response + "\n")

28、异常(ZeroDivisionError、FileNotFoundError、)
try:
    print(5/0)
except ZeroDivisionError:
    print("you can't divide by zero!")

29、
print("please give two numbers,and enter 'q' to exist!")
while True:
    num1=input("please enter the first number:")
    if num1=='q':
        break
    num2 = input("please enter the second number:")
    if num2=='q':
        break
    try:
        answer=int(num1)/int(num2)
    except ZeroDivisionError:
        print("the second can't be zero!")
    else:
        print("the result is:",answer)

30、
try:
    with open(filename) as f:
        contents=f.readlines()
    print(contents)     #.readlines()，若直接打印，则只能打印文件内容以列表形式存储的内容，若为.read()则原文打印
    for content in contents:   #这个遍历主要原因是把readlines()读取的列表形式以字符形式连接
        a=content.strip()
        print(a)
except FileNotFoundError:
    msg="sorry, the file:"+filename+" is not exist!"
    print(msg)
    
---------------------------------------------------------------------------------------------------------------------------------------  
   
   
   
   
   
   
   
   

